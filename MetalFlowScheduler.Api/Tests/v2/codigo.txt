using Google.OrTools.Sat;
using System;
using System.Collections.Generic;
using System.Linq;

// --- Estruturas de Dados ---

public class Product
{
    public string Name { get; }
    public int Quantity { get; }
    public int Price { get; } // Lucro se finalizado no prazo

    public Product(string name, int quantity, int price)
    {
        Name = name;
        Quantity = quantity;
        Price = price;
    }
}

public class Operation
{
    public string Name { get; }
    public decimal Capacity { get; } // Capacidade de produção por hora
    public int SetupTime { get; }   // Tempo de setup em minutos ao trocar produtos

    public Operation(string name, decimal capacity, int setupTime)
    {
        Name = name;
        Capacity = capacity;
        SetupTime = setupTime;
    }
}

public class WorkCenter
{
    public string Name { get; }
    public List<Operation> Operations { get; } // Operações realizadas sequencialmente neste WC

    public WorkCenter(string name, List<Operation> operations)
    {
        Name = name;
        Operations = operations;
    }
}

public class Line
{
    public string Name { get; }
    public List<WorkCenter> WorkCenters { get; } // Sequência de WorkCenters nesta Linha
    public HashSet<string> AllowedProducts { get; } // Produtos permitidos nesta Linha

    public Line(string name, List<WorkCenter> workCenters, IEnumerable<string> allowedProducts)
    {
        Name = name;
        WorkCenters = workCenters;
        AllowedProducts = new HashSet<string>(allowedProducts);
    }

    // Helper para obter todas as operações em sequência para esta linha
    public List<Operation> GetAllOperationsInOrder()
    {
        return WorkCenters.SelectMany(wc => wc.Operations).ToList();
    }
}


class Program
{
    static void Main()
    {
        // --- Dados de Entrada ---
        DateTime startDate = new DateTime(2025, 4, 29, 6, 0, 0);
        int planningHorizonMinutes = 100 * 60; // Horizonte aumentado um pouco

        // --- FLAG DE CONTROLE DE ATRASO ---
        // Defina como 'true' para permitir atrasos (início antes/no deadline),
        // 'false' para proibir qualquer atraso (fim antes/no deadline)
        bool permitirAtraso = false;
        // ------------------------------------

        // Use um deadline mais apertado para testar a lógica de atraso
        DateTime deadlineDate = new DateTime(2025, 5, 1, 16, 0, 0); // Exemplo de deadline apertado (Minuto 3480)
        // DateTime deadlineDate = new DateTime(2025, 5, 2, 13, 0, 0); // Deadline original (Minuto 4740)
        int deadlineMinutes = (int)(deadlineDate - startDate).TotalMinutes;

        var products = new List<Product>
        {
            new Product("VAT30", 100, 50), // Duration ~1200 min
            new Product("VD500", 100, 60), // Duration ~1800 min
            new Product("SX650", 100, 70), // Duration ~2400 min
            new Product("NEWPROD", 50, 80) // Duration ~1200 min
        };

        // Define as operações base
        var fusaoOp = new Operation("Fusao", 10M, 15);
        var aquecimentoOp = new Operation("Aquecimento", 10M, 15);
        var extrusaoOp = new Operation("Extrusao", 10M, 15);
        var corteOp = new Operation("Corte", 10M, 15);

        // Define WorkCenters
        var wcSet1 = new List<WorkCenter>
        {
            new WorkCenter("Aciaria", new List<Operation> { fusaoOp, aquecimentoOp }),
            new WorkCenter("Laminacao", new List<Operation> { extrusaoOp, corteOp })
        };
        var wcSet2 = new List<WorkCenter>
        {
            new WorkCenter("Aciaria_L2", new List<Operation> { fusaoOp, aquecimentoOp }),
            new WorkCenter("Laminacao_L2", new List<Operation> { extrusaoOp, corteOp })
        };

        // Define Linhas
        var lines = new List<Line>
        {
            new Line("Predio 01", wcSet1, new[] { "VAT30", "VD500", "SX650" }),
            new Line("Predio 02", wcSet2, new[] { "NEWPROD" })
        };

        var model = new CpModel();

        // --- Variáveis de Decisão ---
        var assignProdToLine = new Dictionary<(string, string), BoolVar>();
        var intervalVars = new Dictionary<(string, string, string), IntervalVar>();
        var startVars = new Dictionary<(string, string, string), IntVar>();
        var endVars = new Dictionary<(string, string, string), IntVar>();
        var finishedByDeadlineVars = new Dictionary<string, BoolVar>(); // Usado no objetivo e lógica
        var startedAfterDeadlineVars = new Dictionary<string, BoolVar>(); // Usado na lógica da flag
        var productIsScheduled = new Dictionary<string, BoolVar>();


        // Cria variáveis
        foreach (var product in products)
        {
            var productName = product.Name;
            finishedByDeadlineVars[productName] = model.NewBoolVar($"FinishedByDeadline_{productName}");
            startedAfterDeadlineVars[productName] = model.NewBoolVar($"StartedAfterDeadline_{productName}");
            productIsScheduled[productName] = model.NewBoolVar($"IsScheduled_{productName}");

            var possibleLinesForProduct = new List<BoolVar>();

            foreach (var line in lines)
            {
                var lineName = line.Name;
                if (line.AllowedProducts.Contains(productName))
                {
                    var assignmentVar = model.NewBoolVar($"Assign_{productName}_To_{lineName}");
                    assignProdToLine[(productName, lineName)] = assignmentVar;
                    possibleLinesForProduct.Add(assignmentVar);

                    var lineOperations = line.GetAllOperationsInOrder();
                    if (!lineOperations.Any()) continue; // Pula linha sem operações

                    foreach (var operation in lineOperations)
                    {
                        var opName = operation.Name;
                        long duration = Math.Max(1, (long)Math.Ceiling(product.Quantity / operation.Capacity * 60M));
                        var start = model.NewIntVar(0, planningHorizonMinutes, $"Start_{productName}_{opName}_{lineName}");
                        var end = model.NewIntVar(0, planningHorizonMinutes, $"End_{productName}_{opName}_{lineName}");
                        var interval = model.NewIntervalVar(start, duration, end, $"Interval_{productName}_{opName}_{lineName}");

                        startVars[(productName, opName, lineName)] = start;
                        endVars[(productName, opName, lineName)] = end;
                        intervalVars[(productName, opName, lineName)] = interval;

                        model.Add(end == start + duration).OnlyEnforceIf(assignmentVar);
                    }
                }
            }

            if (possibleLinesForProduct.Any())
            {
                model.Add(LinearExpr.Sum(possibleLinesForProduct) == 1).OnlyEnforceIf(productIsScheduled[productName]);
                model.Add(LinearExpr.Sum(possibleLinesForProduct) == 0).OnlyEnforceIf(productIsScheduled[productName].Not());
            }
            else
            {
                model.Add(productIsScheduled[productName] == 0);
            }
        }

        // --- Restrições (Sequência, NoOverlap, Setup, Bloqueio WC) ---
        // (Mantidas como na v15 - sem alterações nesta seção)
        foreach (var line in lines)
        {
            var lineName = line.Name;
            var lineOperations = line.GetAllOperationsInOrder();
            var productsAllowedOnLine = products.Where(p => line.AllowedProducts.Contains(p.Name)).ToList();

            // 1. Sequência de Operações
            foreach (var product in productsAllowedOnLine)
            {
                var productName = product.Name;
                if (assignProdToLine.TryGetValue((productName, lineName), out var assignmentVar))
                {
                    for (int i = 0; i < lineOperations.Count - 1; i++)
                    {
                        var op1 = lineOperations[i];
                        var op2 = lineOperations[i + 1];
                        if (startVars.ContainsKey((productName, op2.Name, lineName)) && endVars.ContainsKey((productName, op1.Name, lineName)))
                        {
                            model.Add(startVars[(productName, op2.Name, lineName)] >= endVars[(productName, op1.Name, lineName)])
                                 .OnlyEnforceIf(assignmentVar);
                        }
                    }
                }
            }

            // 2. Não Sobreposição e Setup
            foreach (var operation in lineOperations)
            {
                var opName = operation.Name;
                var intervalsForOpOnLine = new List<IntervalVar>();
                foreach (var product in productsAllowedOnLine)
                {
                    var productName = product.Name;
                    if (intervalVars.ContainsKey((productName, opName, lineName)) &&
                        assignProdToLine.TryGetValue((productName, lineName), out var assignmentVar))
                    {
                        var start = startVars[(productName, opName, lineName)];
                        var end = endVars[(productName, opName, lineName)];
                        long duration = Math.Max(1, (long)Math.Ceiling(product.Quantity / operation.Capacity * 60M));
                        var optInterval = model.NewOptionalIntervalVar(start, duration, end, assignmentVar, $"OptInterval_{productName}_{opName}_{lineName}");
                        intervalsForOpOnLine.Add(optInterval);
                    }
                }
                if (intervalsForOpOnLine.Count > 1)
                {
                    model.AddNoOverlap(intervalsForOpOnLine);
                }
                for (int i = 0; i < productsAllowedOnLine.Count; i++)
                {
                    for (int j = i + 1; j < productsAllowedOnLine.Count; j++)
                    {
                        var prod1 = productsAllowedOnLine[i];
                        var prod2 = productsAllowedOnLine[j];
                        var p1Name = prod1.Name;
                        var p2Name = prod2.Name;
                        if (!startVars.ContainsKey((p1Name, opName, lineName)) || !startVars.ContainsKey((p2Name, opName, lineName))) continue;
                        if (!assignProdToLine.TryGetValue((p1Name, lineName), out var assign1) ||
                            !assignProdToLine.TryGetValue((p2Name, lineName), out var assign2)) continue;
                        var start1 = startVars[(p1Name, opName, lineName)];
                        var end1 = endVars[(p1Name, opName, lineName)];
                        var start2 = startVars[(p2Name, opName, lineName)];
                        var end2 = endVars[(p2Name, opName, lineName)];
                        var p1BeforeP2OpLine = model.NewBoolVar($"P1BeforeP2_{p1Name}_{p2Name}_{opName}_{lineName}");
                        long transitionTime = operation.SetupTime;
                        model.Add(start2 >= end1 + transitionTime).OnlyEnforceIf(new[] { p1BeforeP2OpLine, assign1, assign2 });
                        model.Add(start1 >= end2 + transitionTime).OnlyEnforceIf(new[] { p1BeforeP2OpLine.Not(), assign1, assign2 });
                    }
                }
            }

            // 3. Bloqueio WC
            var lineWorkCenters = line.WorkCenters;
            for (int wcIdx = 0; wcIdx < lineWorkCenters.Count - 1; wcIdx++)
            {
                var wc1 = lineWorkCenters[wcIdx];
                var wc2 = lineWorkCenters[wcIdx + 1];
                if (!wc1.Operations.Any() || !wc2.Operations.Any()) continue;
                var lastOpWC1 = wc1.Operations.Last();
                var firstOpWC2 = wc2.Operations.First();
                for (int i = 0; i < productsAllowedOnLine.Count; i++)
                {
                    var prod1 = productsAllowedOnLine[i];
                    var p1Name = prod1.Name;
                    if (!endVars.ContainsKey((p1Name, lastOpWC1.Name, lineName)) || !startVars.ContainsKey((p1Name, firstOpWC2.Name, lineName))) continue;
                    if (!assignProdToLine.TryGetValue((p1Name, lineName), out var assign1)) continue;
                    for (int j = i + 1; j < productsAllowedOnLine.Count; j++)
                    {
                        var prod2 = productsAllowedOnLine[j];
                        var p2Name = prod2.Name;
                        if (!endVars.ContainsKey((p2Name, lastOpWC1.Name, lineName)) || !startVars.ContainsKey((p2Name, firstOpWC2.Name, lineName))) continue;
                        if (!assignProdToLine.TryGetValue((p2Name, lineName), out var assign2)) continue;
                        var p1FinishesWC1LastOpBeforeP2 = model.NewBoolVar($"P1FinWC1BeforeP2_{p1Name}_{p2Name}_{wc1.Name}_{lineName}");
                        var end1WC1 = endVars[(p1Name, lastOpWC1.Name, lineName)];
                        var end2WC1 = endVars[(p2Name, lastOpWC1.Name, lineName)];
                        var start1WC2 = startVars[(p1Name, firstOpWC2.Name, lineName)];
                        var start2WC2 = startVars[(p2Name, firstOpWC2.Name, lineName)];
                        model.Add(end1WC1 <= end2WC1).OnlyEnforceIf(new ILiteral[] { p1FinishesWC1LastOpBeforeP2, assign1, assign2 });
                        model.Add(end1WC1 > end2WC1).OnlyEnforceIf(new ILiteral[] { p1FinishesWC1LastOpBeforeP2.Not(), assign1, assign2 });
                        model.Add(start2WC2 >= end1WC1).OnlyEnforceIf(new ILiteral[] { p1FinishesWC1LastOpBeforeP2, assign1, assign2 });
                        model.Add(start1WC2 >= end2WC1).OnlyEnforceIf(new ILiteral[] { p1FinishesWC1LastOpBeforeP2.Not(), assign1, assign2 });
                    }
                }
            }
        }


        // 4. Restrições de Deadline e Definição de Variáveis de Status
        foreach (var product in products)
        {
            var productName = product.Name;
            var isScheduledVar = productIsScheduled[productName];
            var finishedVar = finishedByDeadlineVars[productName];
            var startedAfterVar = startedAfterDeadlineVars[productName];

            string firstOpName = null;
            string lastOpName = null;
            bool productHasValidTimeVars = false;
            List<Line> possibleProductLines = lines.Where(l => l.AllowedProducts.Contains(productName)).ToList();

            // Verifica se existe alguma linha válida e obtém nomes das ops
            foreach (var line in possibleProductLines)
            {
                var currentLineOps = line.GetAllOperationsInOrder();
                if (!currentLineOps.Any()) continue;
                var currentFirstOpName = currentLineOps.First().Name;
                var currentLastOpName = currentLineOps.Last().Name;
                if (startVars.ContainsKey((productName, currentFirstOpName, line.Name)) &&
                    endVars.ContainsKey((productName, currentLastOpName, line.Name)))
                {
                    productHasValidTimeVars = true;
                    if (firstOpName == null) firstOpName = currentFirstOpName;
                    if (lastOpName == null) lastOpName = currentLastOpName;
                }
            }

            if (!productHasValidTimeVars)
            {
                continue;
            }

            // Variáveis intermediárias (necessárias para definir finishedVar/startedAfterVar)
            var actualStartTime = model.NewIntVar(0, planningHorizonMinutes, $"ActualStart_{productName}");
            var actualEndTime = model.NewIntVar(0, planningHorizonMinutes, $"ActualEnd_{productName}");

            // Liga tempos reais
            foreach (var line in possibleProductLines)
            {
                var lineName = line.Name;
                if (startVars.ContainsKey((productName, firstOpName, lineName)) &&
                    endVars.ContainsKey((productName, lastOpName, lineName)) &&
                    assignProdToLine.TryGetValue((productName, lineName), out var assignmentVar))
                {
                    model.Add(actualStartTime == startVars[(productName, firstOpName, lineName)]).OnlyEnforceIf(assignmentVar);
                    model.Add(actualEndTime == endVars[(productName, lastOpName, lineName)]).OnlyEnforceIf(assignmentVar);
                }
            }

            // Define tempos se não agendado
            model.Add(actualStartTime == 0).OnlyEnforceIf(isScheduledVar.Not());
            model.Add(actualEndTime == 0).OnlyEnforceIf(isScheduledVar.Not());

            // Define finishedVar e startedAfterVar (baseado nos tempos reais)
            // Usando a definição robusta da v15
            var endTimeLEDeadlineVar = model.NewBoolVar($"EndTimeLEDeadline_{productName}");
            model.Add(actualEndTime <= deadlineMinutes).OnlyEnforceIf(endTimeLEDeadlineVar);
            model.Add(actualEndTime > deadlineMinutes).OnlyEnforceIf(endTimeLEDeadlineVar.Not());
            model.AddBoolAnd(new ILiteral[] { isScheduledVar, endTimeLEDeadlineVar }).OnlyEnforceIf(finishedVar);
            model.AddImplication(isScheduledVar.Not(), finishedVar.Not());
            model.AddImplication(endTimeLEDeadlineVar.Not(), finishedVar.Not());

            var startTimeGTDeadlineVar = model.NewBoolVar($"StartTimeGTDeadline_{productName}");
            model.Add(actualStartTime > deadlineMinutes).OnlyEnforceIf(startTimeGTDeadlineVar);
            model.Add(actualStartTime <= deadlineMinutes).OnlyEnforceIf(startTimeGTDeadlineVar.Not());
            model.AddBoolAnd(new ILiteral[] { isScheduledVar, startTimeGTDeadlineVar }).OnlyEnforceIf(startedAfterVar);
            model.AddImplication(isScheduledVar.Not(), startedAfterVar.Not());
            model.AddImplication(startTimeGTDeadlineVar.Not(), startedAfterVar.Not());


            // --- LÓGICA CONDICIONAL DA FLAG --- REVISADA v16 ---
            if (permitirAtraso)
            {
                // Se permitir atraso: Se agendado, não pode ter começado APÓS o deadline.
                model.AddImplication(isScheduledVar, startedAfterVar.Not());
            }
            else
            {
                // Se NÃO permitir atraso: Para cada linha possível, se atribuído a ela, deve terminar no prazo.
                foreach (var line in possibleProductLines)
                {
                    var lineName = line.Name;
                    var lineOps = line.GetAllOperationsInOrder();
                    if (!lineOps.Any()) continue;
                    var currentLastOpName = lineOps.Last().Name; // Precisa do nome da última op *desta* linha

                    // Verifica se as variáveis existem para esta linha específica
                    if (endVars.ContainsKey((productName, currentLastOpName, lineName)) &&
                        assignProdToLine.TryGetValue((productName, lineName), out var assignmentVar))
                    {
                        // Se atribuído a esta linha, o tempo final DESTA LINHA deve ser <= deadline
                        model.Add(endVars[(productName, currentLastOpName, lineName)] <= deadlineMinutes)
                             .OnlyEnforceIf(assignmentVar);
                    }
                }
            }
            // --- FIM DA LÓGICA CONDICIONAL ---

        }


        // --- Função Objetivo ---
        // Objetivo ÚNICO: Maximiza lucro dos produtos finalizados no prazo (finishedByDeadlineVars)
        LinearExpr objective = LinearExpr.Sum(products.Select(p => finishedByDeadlineVars[p.Name] * p.Price));
        model.Maximize(objective);


        // --- Resolve ---
        var solver = new CpSolver();
        solver.StringParameters = "max_time_in_seconds:60.0; log_search_progress: true;";
        Console.WriteLine("Iniciando solver...");
        var status = solver.Solve(model);
        Console.WriteLine("Solver finalizado.");

        // --- Exibe Resultados ---
        if (status == CpSolverStatus.Optimal || status == CpSolverStatus.Feasible)
        {
            Console.WriteLine("\n--- Resultado do Agendamento com Linhas ---");
            Console.WriteLine($"Status do Solver: {status}");
            Console.WriteLine($"Data de Início do Planejamento: {startDate:dd/MM/yyyy HH:mm}");
            Console.WriteLine($"Deadline: {deadlineDate:dd/MM/yyyy HH:mm} (Minuto {deadlineMinutes})");
            Console.WriteLine($"Permitir Atraso: {(permitirAtraso ? "SIM" : "NÃO")}"); // Mostra o status da flag
            Console.WriteLine($"Valor Objetivo (Lucro Máximo): {solver.ObjectiveValue}\n"); // Lucro real dos pontuais

            var sortedProducts = products.OrderBy(p => p.Name);

            foreach (var product in sortedProducts)
            {
                var productName = product.Name;
                string assignedLineName = "Não Agendado";
                bool scheduled = productIsScheduled.TryGetValue(productName, out var scheduledVar) &&
                                 solver.Value(scheduledVar) == 1;

                if (scheduled)
                {
                    foreach (var line in lines)
                    {
                        if (assignProdToLine.TryGetValue((productName, line.Name), out var assignVar) &&
                            solver.Value(assignVar) == 1)
                        {
                            assignedLineName = line.Name;
                            break;
                        }
                    }

                    // Recalcula finished baseado no tempo real para exibição precisa
                    bool finished = false;
                    long lastOpEndMin = -1;
                    if (assignedLineName != "Não Agendado")
                    {
                        var assignedLine = lines.First(l => l.Name == assignedLineName);
                        var lineOps = assignedLine.GetAllOperationsInOrder();
                        if (lineOps.Any())
                        {
                            var lastOpName = lineOps.Last().Name;
                            if (endVars.TryGetValue((productName, lastOpName, assignedLineName), out var endVar))
                            {
                                lastOpEndMin = solver.Value(endVar);
                                finished = lastOpEndMin <= deadlineMinutes;
                            }
                        }
                    }

                    long firstOpStartMin = -1;
                    if (assignedLineName != "Não Agendado")
                    {
                        var assignedLine = lines.First(l => l.Name == assignedLineName);
                        var lineOps = assignedLine.GetAllOperationsInOrder();
                        if (lineOps.Any())
                        {
                            var firstOpName = lineOps.First().Name;
                            if (startVars.TryGetValue((productName, firstOpName, assignedLineName), out var startVar))
                            {
                                firstOpStartMin = solver.Value(startVar);
                            }
                        }
                    }

                    var firstOpStartTime = startDate.AddMinutes(firstOpStartMin);
                    var lastOpEndTime = startDate.AddMinutes(lastOpEndMin);

                    string productStatus;
                    Console.WriteLine($"Produto: {productName} (Atribuído à Linha: {assignedLineName})");

                    // Status baseado no tempo real de término
                    if (finished)
                    {
                        productStatus = "FINALIZADO (dentro do deadline)";
                        Console.WriteLine($"  Status: {productStatus}");
                        Console.WriteLine($"  Lucro Contribuído (base): {product.Price}");
                    }
                    else
                    {
                        // Este bloco só deve ser alcançado se permitirAtraso = true
                        // Se permitirAtraso = false, a restrição deveria ter impedido o agendamento.
                        if (!permitirAtraso)
                        {
                            Console.WriteLine("  ERRO LÓGICO: Agendado mas atrasado quando não permitido!");
                            productStatus = "ERRO";
                        }
                        else
                        {
                            productStatus = "CONCLUIDO APOS DEADLINE / PARCIALMENTE PLANEJADO";
                            Console.WriteLine($"  Status: {productStatus}");
                        }
                    }

                    Console.WriteLine($"  Primeira operação iniciada em: {firstOpStartTime:dd/MM/yyyy HH:mm} (Minuto {firstOpStartMin})");
                    Console.WriteLine($"  Data real de conclusão planejada: {lastOpEndTime:dd/MM/yyyy HH:mm} (Minuto {lastOpEndMin})");

                    var assignedLineDetails = lines.First(l => l.Name == assignedLineName);
                    foreach (var operation in assignedLineDetails.GetAllOperationsInOrder())
                    {
                        if (startVars.TryGetValue((productName, operation.Name, assignedLineName), out var startVar) &&
                            endVars.TryGetValue((productName, operation.Name, assignedLineName), out var endVar))
                        {
                            var startMin = solver.Value(startVar);
                            var endMin = solver.Value(endVar);
                            var opStartTime = startDate.AddMinutes(startMin);
                            var opEndTime = startDate.AddMinutes(endMin);
                            Console.WriteLine($"    {operation.Name}: {opStartTime:dd/MM HH:mm} (Min {startMin}) -> {opEndTime:dd/MM HH:mm} (Min {endMin})");
                        }
                    }

                    if (!finished && lastOpEndMin >= 0 && firstOpStartMin >= 0)
                    {
                        TimeSpan atraso = lastOpEndTime - deadlineDate;
                        if (atraso.TotalMinutes > 0)
                        {
                            Console.WriteLine($"  Tempo de Atraso: {atraso.TotalMinutes} minutos ({atraso.Days}d {atraso.Hours}h {atraso.Minutes}m)");
                        }
                    }
                }
                else // Se scheduled == false
                {
                    Console.WriteLine($"Produto: {productName}");
                    if (!permitirAtraso)
                    {
                        Console.WriteLine($"  Status: NÃO AGENDADO (Terminaria após deadline ou não lucrativo)");
                    }
                    else
                    {
                        Console.WriteLine($"  Status: NÃO AGENDADO (Começaria após deadline ou não lucrativo)");
                    }
                }
                Console.WriteLine();
            }
        }
        else
        {
            Console.WriteLine("Nenhuma solução viável encontrada ou solução ótima não encontrada dentro do tempo limite.");
            Console.WriteLine($"Status do Solver: {status}");
        }

        Console.WriteLine("\nTeste do Solver concluído. Pressione Enter para sair.");
        Console.ReadLine();
    }
}
